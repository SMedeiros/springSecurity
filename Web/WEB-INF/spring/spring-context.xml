<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
		  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		  xmlns:context="http://www.springframework.org/schema/context"
		  xmlns:p="http://www.springframework.org/schema/p"
		  xmlns:mvc="http://www.springframework.org/schema/mvc"
		  xsi:schemaLocation="http://www.springframework.org/schema/mvc
			http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
			http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
			http://www.springframework.org/schema/context
			http://www.springframework.org/schema/context/spring-context-3.1.xsd">

	<context:annotation-config />

	<context:component-scan base-package="br.com.newsoft.security" />

	<mvc:annotation-driven />

	<!-- 
		ViewResolver do spring será o responsável por configurar onde serão colodados os arquivos da view (prefix) e a extensão do arquivo (suffix)
		No meu caso tô usando como view o jsp mesmo e eles ficam no diretório /WEB-INf/jsp/
	 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"  p:prefix="/WEB-INF/jsp/" p:suffix=".jsp" />
	
	 <!--
		Avisa para o spring que só deve acessar o servidor se a url requisitada for para um @Controller. se for 
		conteúdo estático não é necessário. 	
		<mvc:default-servlet-handler />
		
		Diretório onde fica os arquivos estáticos do sistema mapeia o caminho a uma url. 
		No caso tudo que tiver na url /resources/** será entendido como conteúdo estático.
	 	<mvc:resources location="/resources/" mapping="/resources/**" />
	
		Como o exemplo não tem nada demais essas configurações são desnessárias, 
		mais são MUITO recomendadas em sistemas em produção(assim como usar um proxy reverso pra servir conteúdo estático :)).
    -->

</beans>